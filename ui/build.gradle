buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE"
    }
}

plugins {
    id "java"
    id "idea"
    id "org.springframework.boot" version "2.2.1.RELEASE"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "Hoxton.RELEASE")
}

ext.buildNumber = {
    def buildNumber = System.getenv("VERSION")
    if (buildNumber == null || buildNumber.allWhitespace) {
        buildNumber = "SNAPSHOT"
    }
    return buildNumber
}

group = 'wonderland'
project.version = (System.getenv("VERSION") ?: "3.0-SNAPSHOT")

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compile group: 'org.joinfaces', name: 'jsf-spring-boot-starter', version: '3.1.0'
    compile group: 'org.primefaces', name: 'primefaces', version: '6.2'
    implementation('org.springframework.cloud:spring-cloud-starter-config')
    implementation('org.springframework.cloud:spring-cloud-loadbalancer')
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
//    implementation('org.springframework.cloud:spring-cloud-starter-zipkin')
//    implementation "io.micrometer:micrometer-registry-prometheus"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}


task printVersion {
    doLast {
        println project.version
    }
}

wrapper {
    gradleVersion = "6.0"
    distributionType = Wrapper.DistributionType.ALL
}
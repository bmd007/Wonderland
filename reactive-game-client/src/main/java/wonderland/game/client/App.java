/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package wonderland.game.client;

import com.jme3.app.SimpleApplication;
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA;
import com.jme3.scene.Geometry;
import com.jme3.scene.shape.Box;
import com.jme3.system.AppSettings;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.ByteBufUtil;
import io.netty.buffer.CompositeByteBuf;
import io.rsocket.Payload;
import io.rsocket.RSocket;
import io.rsocket.core.RSocketConnector;
import io.rsocket.frame.decoder.PayloadDecoder;
import io.rsocket.metadata.CompositeMetadataCodec;
import io.rsocket.metadata.RoutingMetadata;
import io.rsocket.metadata.TaggingMetadataCodec;
import io.rsocket.metadata.WellKnownMimeType;
import io.rsocket.transport.netty.client.TcpClientTransport;
import io.rsocket.util.DefaultPayload;
import org.springframework.messaging.rsocket.RSocketRequester;
import reactor.core.publisher.Flux;
import reactor.core.scheduler.Scheduler;
import reactor.core.scheduler.Schedulers;
import reactor.util.retry.Retry;

import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

public class App extends SimpleApplication {

    Box b = new Box(1, 1, 1);
    Geometry geom = new Geometry("Box", b);

    record Rocket(int x, int y){ }
    static ConcurrentLinkedQueue<Rocket> localValues = new ConcurrentLinkedQueue<>();

    private static Flux<Rocket> rockets = RSocketRequester.builder()
            .rsocketConnector(
                    rSocketConnector ->
                            rSocketConnector.reconnect(Retry.fixedDelay(2, Duration.ofSeconds(2)))
            )
            .tcp("localhost", 4789)
            .route("rocket")
            .data("abc")
            .retrieveFlux(String.class)
            .map(value -> value.split(":"))
            .filter(values -> values.length == 2)
            .map(values -> new Rocket(Integer.valueOf(values[0]), Integer.valueOf(values[1])))
            .doOnNext(localValues::add);

    public static void main(String[] args) throws InterruptedException {
        rockets.subscribe();
        App app = new App();
        AppSettings settings = new AppSettings(true);
        settings.setTitle("My Awesome Game");
        app.setSettings(settings);
        app.start();
    }

    @Override
    public void simpleInitApp() {
        Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        mat.setColor("Color", ColorRGBA.Blue);
        geom.setMaterial(mat);
        rootNode.attachChild(geom);
    }

    @Override
    public void simpleUpdate(float tpf) {
        var rocket = localValues.poll();
//        geom.setLocalTranslation(rocket.x, 4, rocket.y);
        geom.setLocalTranslation(rocket.y, 4, 1);
    }
}

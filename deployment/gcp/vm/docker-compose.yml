version: "3.7"
services:
  consul:
    container_name: consul
    hostname: consul
    image: consul
    ports:
      - "8500:8500"
      - "8300:8300"
    volumes:
      - ./metrics/consul.json:/consul/config/consul.json
    environment:
      SERVICE_IGNORE: any_value

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      SERVICE_IGNORE: any_value

  kafka:
    image: confluentinc/cp-server:7.2.2
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9101:9101"
    environment:
      KAFKA_CREATE_TOPICS: >-
        wonder-matcher-wonder-seeker-match-events-repartition:1:1,
        wonder-seeker-passive-like-events:1:1,
        dance-partner-events:1:1,
        event_log:1:1
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      SERVICE_IGNORE: any_value

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
#    network_mode: host
    user: "1000"
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics/prometheus_db:/var/lib/prometheus
      - ./metrics/prometheus_db:/prometheus
      - ./metrics/prometheus_db:/etc/prometheus
      - ./metrics/alert.rules:/etc/prometheus/alert.rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.route-prefix=/'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - '9090:9090'
    environment:
      SERVICE_IGNORE: any_value

#  grafana:
#    container_name: grafana
#    image: grafana/grafana
##    network_mode: host
#    user: "1000"
#    environment:
#      GF_SECURITY_ADMIN_USER: admin
#      GF_SECURITY_ADMIN_PASSWORD: admin
#      SERVICE_IGNORE: any_value
#    volumes:
#      - ./metrics/grafana_db:/var/lib/grafana
#    depends_on:
#      - prometheus
#    ports:
#      - '3000:3000'

  rabbitmq:
#    command:
#      - /etc/rabbitmq/rabbitMqUserCreation.sh
    container_name: rabbitmq
    hostname: rabbitmq
    build:
      context: ./rabbitmq/
      dockerfile: Dockerfile
    ports:
      - "4369:4369"
      - "5672:5672"
      - "15155:15155"
      - "15672:15672"
      - "15673:15673"
      - "15675:15675"
      - "15676:15676"
      - "25672:25672"
      - "61613:61613"
      - "61614:61614"
    environment:
      RABBITMQ_DEFAULT_USER: imarabbit
      RABBITMQ_DEFAULT_PASS: noyouarenot
      SERVICE_IGNORE: any_value

  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    image: bmd007/api-gateway
    ports:
      - "9591:9591"
      - "9592:9592"
      - "8080:8080"
    depends_on:
      - consul
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
#      SPRING_PROFILES_ACTIVE: confluent
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CONFIG_IMPORT: optional:consul:consul:8500
      SERVICE_IGNORE: any_value

  message-publisher:
    container_name: message-publisher
    hostname: message-publisher
    image: bmd007/message-publisher
    ports:
      - "9566:9566"
      - "9567:9567"
    depends_on:
      - consul
      - kafka
      - api-gateway
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_RABBITMQ_USERNAME: "imarabbit"
      SPRING_RABBITMQ_PASSWORD: "noyouarenot"
#      SPRING_PROFILES_ACTIVE: confluent
      SPRING_CONFIG_IMPORT: optional:consul:consul:8500
      SPRING_CLOUD_CONSUL_HOST: consul
      SERVICE_IGNORE: any_value

  wonder-matcher:
    container_name: wonder-matcher
    hostname: wonder-matcher
    image: bmd007/wonder-matcher
    ports:
      - "9585:9585"
      - "9586:9586"
      - "8084:8084"
      - "9097:9097"
    depends_on:
      - consul
      - kafka
      - api-gateway
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_STREAMS_SERVER_CONFIG_APP_IP: wonder-matcher
      KAFKA_STREAMS_SERVER_CONFIG_APP_PORT: 9585
#      SPRING_PROFILES_ACTIVE: confluent
      SPRING_CONFIG_IMPORT: optional:consul:consul:8500
      SPRING_CLOUD_CONSUL_HOST: consul
      SERVICE_IGNORE: any_value

  # Registrator to register services in consul
  registrator:
    container_name: registrator
    image: gliderlabs/registrator
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    command: "-internal consul://consul:8500"
    depends_on:
      - consul

version: "3.7"
services:

  consul:
    container_name: consul
    hostname: consul
    image: consul
    ports:
      - "8500:8500"
      - "8300:8300"
    volumes:
      - ./metrics/consul.json:/consul/config/consul.json

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"


  kafka:
    container_name: kafka
    hostname: kafka
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    ports:
      - target: 9094
        published: 9094
        protocol: tcp
        mode: host
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
#      KAFKA_CREATE_TOPICS: >-
#        mover-position-updates:12:3,
#        fence_event_log:12:3,
#        mover-global-state-store:12:3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT, OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092, OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://kafka:9092, OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_PORT: 9092
      JMX_PORT: 9997
      #     KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
#    network_mode: host
    user: "1000"
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics/prometheus_db:/var/lib/prometheus
      - ./metrics/prometheus_db:/prometheus
      - ./metrics/prometheus_db:/etc/prometheus
      - ./metrics/alert.rules:/etc/prometheus/alert.rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.route-prefix=/'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - '9090:9090'

  grafana:
    container_name: grafana
    image: grafana/grafana
#    network_mode: host
    user: "1000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./metrics/grafana_db:/var/lib/grafana
    depends_on:
      - prometheus
    ports:
      - '3000:3000'

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    ports:
      - "5672:5672"
      - "15672:15672"
      - "4369:4369"
      - "25672:25672"
      - "61613:61613"
      - "61614:61614"
    environment:
      - RABBITMQ_DEFAULT_USER=imarabbit
      - RABBITMQ_DEFAULT_PASS=noyouarenot

  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    image: bmd007/api-gateway
    ports:
      - "9532:9532"
      - "9533:9533"
      - "7022:7022"
    depends_on:
      - consul
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
#      SPRING_PROFILES_ACTIVE: confluent
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CONFIG_IMPORT: optional:consul:consul:8500


  message-publisher:
    container_name: message-publisher
    hostname: message-publisher
    image: bmd007/message-publisher
    ports:
      - "9566:9566"
      - "9567:9567"
    depends_on:
      - consul
      - kafka
      - api-gateway
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
#      SPRING_PROFILES_ACTIVE: confluent
      SPRING_CONFIG_IMPORT: optional:consul:consul:8500
      SPRING_CLOUD_CONSUL_HOST: consul


  wonder-matcher:
    container_name: wonder-matcher
    hostname: wonder-matcher
    image: bmd007/wonder-matcher
    ports:
      - "9585:9585"
      - "9586:9586"
      - "8084:8084"
      - "9097:9097"
    depends_on:
      - consul
      - kafka
      - api-gateway
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_STREAMS_SERVER_CONFIG_APP_IP: wonder-matcher
      KAFKA_STREAMS_SERVER_CONFIG_APP_PORT: 9585
#      SPRING_PROFILES_ACTIVE: confluent
      SPRING_CONFIG_IMPORT: optional:consul:consul:8500
      SPRING_CLOUD_CONSUL_HOST: consul

version: "3.7"
services:

  consul:
    container_name: consul
    hostname: consul
    image: consul
    ports:
      - "8500:8500"
      - "8300:8300"
    volumes:
      - ./metrics/consul.json:/consul/config/consul.json

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      #      KAFKA_CREATE_TOPICS: >-
      #        mover-position-updates:1:1,
      #        event_log:1:1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
#    network_mode: host
    user: "1000"
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics/prometheus_db:/var/lib/prometheus
      - ./metrics/prometheus_db:/prometheus
      - ./metrics/prometheus_db:/etc/prometheus
      - ./metrics/alert.rules:/etc/prometheus/alert.rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.route-prefix=/'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - '9090:9090'

  grafana:
    container_name: grafana
    image: grafana/grafana
#    network_mode: host
    user: "1000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./metrics/grafana_db:/var/lib/grafana
    depends_on:
      - prometheus
    ports:
      - '3000:3000'

  mongo:
    image: mongo
    container_name: mongo
    #    environment:
    #      MONGO_INITDB_ROOT_USERNAME: root
    #      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    build:
      context: .
      dockerfile: RabbitMQwithStompDockerfile
    ports:
      - "5672:5672"
      - "15672:15672"
      - "4369:4369"
      - "25672:25672"
      - "61613:61613"
      - "61614:61614"
    environment:
      SERVICE_IGNORE: any_value

  postgresql:
    hostname: postgresql
    image: postgres:14
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=wonderland

  pgadmin:
    image: thajeztah/pgadmin4
    ports:
      - '89:5050'

  kafka-manager:
    depends_on:
      - zookeeper
      - kafka
    image: rafabsb/kafka-manager-docker:2.4
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: letmein
      KM_ARGS: -Djava.net.preferIPv4Stack=true

  elasticsearch:
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6
    environment:
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.tcp.port=9300
      - transport.host=0.0.0.0
      - transport.publish_port=9300
      - SERVICE_9300_NAME=elasticsearch
      - SERVICE_9200_NAME=elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - '9300:9300'
      - '9200:9200'

  kibana:
    hostname: kibana
    depends_on:
      - elasticsearch
    image: docker.elastic.co/kibana/kibana:6.8.6
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch
    ports:
      - '5601:5601'

  # Registrator to register services in consul
  registrator:
    image: gliderlabs/registrator
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    command: "-internal consul://consul:8500"
    depends_on:
      - consul

  neo4j:
    depends_on:
      - registrator
    image: neo4j:4.0.6
    hostname: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
      - "6477:6477"
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
      - ./neo4j/plugins:/plugins
      - ./neo4j/import:/var/lib/neo4j/import
    environment:
      - SERVICE_7473_NAME=neo4j
      - SERVICE_7474_NAME=neo4j
      - SERVICE_7687_NAME=neo4j
      - SERVICE_6477_NAME=neo4j
      - NEO4J_AUTH=neo4j/test
      - NEO4JLABS_PLUGINS=["apoc", "graph-algorithms"]
      - NEO4J_dbms_connector_http_listen__address= :7474
      - NEO4J_dbms_connector_https_listen__address= :6477
      - NEO4J_dbms_connector_bolt_listen__address= :7687
      - NEO4J_dbms_logs_debug_level=DEBUG
      - NEO4J_apoc_import_file_enabled="true"
      #      - NEO4J_HEAP_MEMORY=1G
      #      - NEO4J_CACHE_MEMORY=1G
      - NEO4J_dbms_security_procedures_whitelist= apoc.*, algo.*
      - NEO4J_dbms_security_procedures_unrestricted= apoc.*,algo.*
  #      NEO4J_AUTH: none
